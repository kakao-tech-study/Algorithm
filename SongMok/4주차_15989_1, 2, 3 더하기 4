15989번. 1, 2, 3 더하기 4
    
    ```python
    dp = [0] * 10001
    dp[0] = 1
    
    for i in [1, 2, 3]:
        for j in range(i, 10001):
            dp[j] += dp[j - i]
    
    T = int(input())
    for _ in range(T):
        n = int(input())
        print(dp[n])
    ```
    
    일단 dp문제인것을 알았는데 점화식 찾는게 제일 어려웠다. 코드를 보면 dp[0] = 1로 초기화하고, 1, 2, 3을 순서대로 사용하면서 경우의 수를 계산한다.
    
    문제에서 중요한 부분이 **'합을 이루고 있는 수의 순서만 다른 것은 같은 것으로 친다'**인데, 예를 들어 2는 1+1이나 2로 만들 수 있고, 3은 2+1이나 1+2처럼 만들 수 있다는 거다.
    
    결국 방법을 찾았는데, 1, 2, 3을 사용할 때마다 이전 숫자들의 경우의 수를 활용하면 된다. 코드에서 보면:
    
    `for i in [1, 2, 3]:` 으로 1,2,3을 순서대로 사용하고
    
    `for j in range(i, 10001):` 로 현재 숫자부터 계산하면서
    
    `dp[j] += dp[j - i]` 로 이전 경우의 수를 현재 값에 더해준다.
    
    dp[j-i]는 현재 숫자에서 1, 2, 3을 뺀 숫자의 경우의 수를 더해가면서 모든 경우를 계산하는거다. 이후 테스트 케이스 처리하고 입력 받아서 dp 값 연산하면 끝난다.
